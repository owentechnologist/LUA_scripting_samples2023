#! /usr/bin/env bash

# this script depends on loadLUA.sh being executed before it is run
# please edit that script and execute it once before running this script

# this script expects to be edited with the following values needing to be set:
# The host of the target Redis instance
# The port of the target Redis instance
# edit these two properties to match your environment:
host=redis-6379.homelab.local
port=6379

# this script also expects 3 arguments:
# 1 the number of times it should write SortedSets
# 2 the number of sortedSets to write
# 3 the number of times to read the values in sortedSets (between each write)

# example execution (runs outer loop 300 times writes 1 sortedSet each time and reads 40 times):
# ./oneWriteManyRead.sh 300 1 40

# to setup a new test run where plenty of data is available for reading...
# first: execute with expected number of outer loops, large number of writes, 1 read
# ./oneWriteManyRead.sh 300 1000 1

# delete old set of routing values in case the user wants different settings this run:
redis-cli -h $host -p $port del z:routvalues

# get the SHA value for the LUA script that calculates the routing values ( loaded using loadLUA.sh )
calcrouts=$(redis-cli -h $host -p $port get calcrouts$host)

# generate a new set of routing values for use in this test:
redis-cli -h $host -p $port EVALSHA $calcrouts 1 z:routvalues $1

# get the SHA values for the LUA scripts to be used in this test:
varyzs=$(redis-cli -h $host -p $port get varyzs$host)
avgzsv=$(redis-cli -h $host -p $port get avgzsv$host)

# setup starttime value to measure time of this test:
starttime=$(redis-cli -h $host -p $port time)

# do some parsing/formatting to allow time to be used as a value:
arrIN=(${starttime// / })
starttime=${arrIN[0]}

# loop through the write and nested multiple read processes
for ((i =0; i < $1; i++)) do

# get target routing value for this iteration of the loop:
# if number of loops is greater than # of available routing values ?? happens ??
routV=$(redis-cli -h $host -p $port zrange z:routvalues ${i} ${i})
echo 'routing value for this iteration is: '
echo $routV

# write entries to multiple varying length sortedSets:
echo redis-cli -h $host -p $port EVALSHA $varyzs 1 z:{$routV}:PURCH:${i+1} $2 50
redis-cli -h $host -p $port EVALSHA $varyzs 1 z:{$routV} $2 50

# begin read loop for this iteration:
for ((t =1; t < $3; t++)) do
    # grab a SortedSet using the current iteration of this nested read loop as a selector
    # may result in many cache misses?
   echo redis-cli -h $host -p $port zrange z:{$routV}:PURCH:$t 0 -1
   oput=$(redis-cli -h $host -p $port zrange z:{$routV}:PURCH:$t 0 -1) &

done

oput=$(redis-cli -h $host -p $port zrange z:{$routV}:PURCH:$t 0 -1)
echo 'executed '$cnt ' reads - last one of this set was against z:{'$routV'}:PURCH:'$t' and resulted in :'
echo $oput

done

endtime=$(redis-cli -h $host -p $port time)

arrIN=(${endtime// / })
endtime=${arrIN[0]}

duration=$(($endtime-$starttime))
echo $starttime
echo $endtime
echo $0 $1 $2 $3 "took "$duration "seconds"